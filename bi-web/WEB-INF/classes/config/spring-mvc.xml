<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.2.xsd 
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			">
	<!-- 默认的注解映射的支持 ,它会自动注册DefaultAnnotationHandlerMapping 与AnnotationMethodHandlerAdapter -->
<!-- 	<mvc:annotation-driven /> -->
	<import resource="mybatis-dataSource.xml" />
	
		<!-- 自动扫描(自动注入) -->
	<context:component-scan base-package="org.bi" >
		<context:include-filter type="regex" expression="org.bi.*.module" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 需要扫描的标注了@Controller的类 -->
	<context:component-scan base-package="org.bi">
		<context:include-filter type="regex" expression="org.bi.*.controller.*" />
		<!-- 这里排除service,防止事务失效 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- 配置js，css等静态文件直接映射到对应的文件夹，不被DispatcherServlet处理 -->
    <mvc:resources location="/resources/" mapping="/resources/**"/>
    <mvc:resources location="/bace/" mapping="/bace/**"/>
    <mvc:resources location="/uploads/**" mapping="/uploads/**"/>
	
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
	</bean>
	
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean
						class="org.bi.webbace.util.mybatis.paginator.jackson2.PageListJsonMapper" />
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<bean id="httpClientFactory"
			class="org.springframework.http.client.SimpleClientHttpRequestFactory">
		<property name="connectTimeout" value="10000" />
		<property name="readTimeout" value="10000" />
	</bean>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="httpClientFactory" />
	</bean>

	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="suffix" value=".jsp" />
		<property name="order" value="1"/>
	</bean>


	<!-- 配置freeMarker视图解析器 -->  
    <bean id="viewResolverFtl" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">  
        <property name="viewClass" value="org.bi.webbace.util.MyFreeMarkerView"/>  
        <property name="contentType" value="text/html; charset=utf-8"/>  
        <property name="cache" value="true" />
        <property name="suffix" value=".ftl" />  
        <property name="order" value="0"/>  
    </bean>  
      
    <!-- 配置freeMarker的模板路径 -->  
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
		<property name="templateLoaderPath">
			<value>/</value>
		</property>
        <property name="freemarkerVariables">  
            <map>  
                <entry key="xml_escape" value-ref="fmXmlEscape" />  
            </map>  
        </property>  
        <property name="defaultEncoding">  
            <value>utf-8</value>  
        </property>  
        <property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="number_format">0.##########</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="template_exception_handler">ignore</prop>
				<prop key="auto_import">spring.ftl as spring</prop>
			</props>
		</property>
    </bean>
       
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/> 

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>

 	<mvc:interceptors>
    	<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="lang" />
		</bean>
		<mvc:interceptor>
			 <mvc:mapping path="/**"/> <!-- 需要拦截的 -->
        	 <mvc:exclude-mapping path="/bace/**"/>  <!-- 不需要拦截的 -->
        	 <mvc:exclude-mapping path="/resources/**"/> 
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean class="org.bi.webbace.util.SystemInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 共通异常处理 -->
	<bean id="exceptionResolver" class="org.bi.webbace.util.MyExceptionHandler">  
		<property name="defaultErrorView">
			<value>500.jsp</value>
		</property>
		<property name="exceptionMappings">
			<props>
				<prop key="java.sql.Exception">error/sqlException</prop>
			</props>
		</property>
	</bean>

	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>

	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="proxyTargetClass" value="true" />
		<property name="beanNames">
			<list>
				<!-- 这里配置需要拦截的bean id列表 -->
				<value>org.bi.*</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>druid-stat-interceptor</value>
			</list>
		</property>
	</bean>

</beans>